const db = require('../config/db'); // K·∫øt n·ªëi database
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// 1. ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
exports.registerUser = async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body); // Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

        const { Ten, Email, MatKhau, VaiTro = 'NguoiDung' } = req.body;

        // Ki·ªÉm tra VaiTro h·ª£p l·ªá
        const validRoles = ['NguoiDung', 'QuanTri'];
        if (!validRoles.includes(VaiTro)) {
            console.log("üö® Vai tr√≤ kh√¥ng h·ª£p l·ªá:", VaiTro);
            return res.status(400).json({ error: "Vai tr√≤ kh√¥ng h·ª£p l·ªá" });
        }

        // Ki·ªÉm tra Email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const [existingUser] = await db.query('SELECT * FROM NguoiDung WHERE Email = ?', [Email]);
        console.log("üîç Ki·ªÉm tra email t·ªìn t·∫°i:", existingUser);

        if (existingUser.length > 0) {
            return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(MatKhau, 10);
        console.log("üîë M·∫≠t kh·∫©u ƒë√£ m√£ h√≥a:", hashedPassword);

        // Th√™m v√†o database
        const query = 'INSERT INTO NguoiDung (Ten, Email, MatKhau, VaiTro) VALUES (?, ?, ?, ?)';
        const [result] = await db.query(query, [Ten, Email, hashedPassword, VaiTro]);
        console.log("üî• K·∫øt qu·∫£ INSERT:", result);

        console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:", result);
        res.status(201).json({ id: result.insertId, Ten, Email, VaiTro });

    } catch (error) {
        console.error("‚ùå L·ªói server khi ƒëƒÉng k√Ω:", error);
        res.status(500).json({ error: "L·ªói server", details: error.message });
    }
};



// 2. ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
exports.loginUser = async (req, res) => {
    const { Email, MatKhau } = req.body;
    console.log("üì© D·ªØ li·ªáu nh·∫≠n t·ª´ client:", { Email, MatKhau });

    try {
        // Truy v·∫•n th√¥ng tin ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu theo email
        const [user] = await db.query("SELECT * FROM NguoiDung WHERE Email = ?", [Email]);
        console.log("üîç K·∫øt qu·∫£ truy v·∫•n:", user);

        if (user.length > 0) {
            // Ki·ªÉm tra m·∫≠t kh·∫©u
            const isMatch = await bcrypt.compare(MatKhau, user[0].MatKhau);
            console.log("üîë Ki·ªÉm tra m·∫≠t kh·∫©u:", isMatch);

            if (isMatch) {
                // X√°c ƒë·ªãnh vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
                let VaiTro = user[0].VaiTro || "NguoiDung"; // N·∫øu c·ªôt VaiTro kh√¥ng t·ªìn t·∫°i, m·∫∑c ƒë·ªãnh l√† "NguoiDung"
                if (user[0].Email === "admin@example.com") {
                    VaiTro = "admin"; // X·ª≠ l√Ω vai tr√≤ admin n·∫øu email l√† admin
                }

                // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                const userData = {
                    id: user[0].MaNguoiDung,
                    Ten: user[0].Ten,
                    Email: user[0].Email,
                    VaiTro: VaiTro // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
                };

                // T·∫°o token JWT
                const token = jwt.sign(
                    { id: user[0].MaNguoiDung, VaiTro: VaiTro },
                    process.env.JWT_SECRET,  // Bi·∫øn m√¥i tr∆∞·ªùng ch·ª©a kh√≥a b√≠ m·∫≠t
                    { expiresIn: '1h' } // Token h·∫øt h·∫°n trong 1 gi·ªù
                );

                console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", userData);
                console.log("üîê JWT Token:", token);

                return res.status(200).json({
                    message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
                    user: userData,
                    token  // Tr·∫£ v·ªÅ token trong response
                });
            } else {
                // N·∫øu m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
                return res.status(401).json({ error: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
            }
        } else {
            // N·∫øu email kh√¥ng t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu
            return res.status(404).json({ error: "Email kh√¥ng t·ªìn t·∫°i!" });
        }
    } catch (error) {
        // X·ª≠ l√Ω l·ªói h·ªá th·ªëng
        console.error("üî• L·ªói ƒëƒÉng nh·∫≠p:", error);
        return res.status(500).json({ error: "L·ªói ƒëƒÉng nh·∫≠p th·∫•t b·∫°i", details: error.message });
    }
};


// 3. L·∫•y danh s√°ch ng∆∞·ªùi d√πng
exports.getAllUsers = async (req, res) => {
    try {
        const [users] = await db.query("SELECT * FROM NguoiDung");
        res.json(users);
    } catch (error) {
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng th·∫•t b·∫°i" });
    }
};

// 4. L·∫•y chi ti·∫øt ng∆∞·ªùi d√πng theo ID
exports.getUserById = async (req, res) => {
    const { id } = req.params;
    if (isNaN(id)) {
        return res.status(400).json({ error: "ID kh√¥ng h·ª£p l·ªá" });
    }
    try {
        const [users] = await db.query("SELECT * FROM NguoiDung WHERE MaNguoiDung = ?", [parseInt(id)]);
        if (users.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        res.json(users[0]);
    } catch (error) {
        res.status(500).json({ error: "L·ªói l·∫•y ng∆∞·ªùi d√πng th·∫•t b·∫°i", details: error.message });
    }
};

// 5. C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
exports.updateUser = async (req, res) => {
    const { id } = req.params;
    const { Ten, Email, MatKhau, VaiTro } = req.body;
    try {
        let hashedPassword;
        if (MatKhau) {
            hashedPassword = await bcrypt.hash(MatKhau, 10);
        }
        const query = MatKhau ?
            'UPDATE NguoiDung SET Ten = ?, Email = ?, MatKhau = ?, VaiTro = ? WHERE MaNguoiDung = ?'
            : 'UPDATE NguoiDung SET Ten = ?, Email = ?, VaiTro = ? WHERE MaNguoiDung = ?';
        const params = MatKhau ? [Ten, Email, hashedPassword, VaiTro, id] : [Ten, Email, VaiTro, id];
        await db.query(query, params);
        res.json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th·∫•t b·∫°i", details: error.message });
    }
};

// 6. X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res) => {
    const { id } = req.params;
    try {
        await db.query('DELETE FROM NguoiDung WHERE MaNguoiDung = ?', [id]);
        res.json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ error: "L·ªói x√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i", details: error.message });
    }
};
