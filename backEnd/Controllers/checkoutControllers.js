const db = require('../config/db');

// üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ thanh to√°n
exports.getAllcheckouts = async (req, res) => {
  try {
    const query = `
      SELECT tt.MaThanhToan, tt.MaDonHang, tt.PhuongThuc, tt.TrangThai, tt.NgayThanhToan,
             dh.MaNguoiDung, dh.TongTien, nd.Ten AS TenNguoiDung, nd.Email
      FROM ThanhToan tt
      LEFT JOIN DonHang dh ON tt.MaDonHang = dh.MaDonHang
      LEFT JOIN NguoiDung nd ON dh.MaNguoiDung = nd.MaNguoiDung
      ORDER BY tt.NgayThanhToan DESC
    `;
    const [rows] = await db.query(query);
    res.status(200).json(rows);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch thanh to√°n:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};

// üü¢ L·∫•y th√¥ng tin chi ti·∫øt thanh to√°n theo MaThanhToan
exports.getcheckoutById = async (req, res) => {
  try {
    const { MaThanhToan } = req.params;
    const query = `
      SELECT tt.MaThanhToan, tt.MaDonHang, tt.PhuongThuc, tt.TrangThai, tt.NgayThanhToan,
             dh.MaNguoiDung, dh.TongTien, dh.TrangThai AS TrangThaiDonHang,
             nd.Ten AS TenNguoiDung, nd.Email
      FROM ThanhToan tt
      LEFT JOIN DonHang dh ON tt.MaDonHang = dh.MaDonHang
      LEFT JOIN NguoiDung nd ON dh.MaNguoiDung = nd.MaNguoiDung
      WHERE tt.MaThanhToan = ?
    `;
    const [rows] = await db.query(query, [MaThanhToan]);
    if (rows.length === 0) {
      return res.status(404).json({ message: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i.' });
    }
    res.status(200).json(rows[0]);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin thanh to√°n:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};

// üü¢ L·∫•y danh s√°ch thanh to√°n theo MaDonHang
exports.getcheckoutsByOrder = async (req, res) => {
  try {
    const { MaDonHang } = req.params;
    const query = `
      SELECT tt.MaThanhToan, tt.PhuongThuc, tt.TrangThai, tt.NgayThanhToan,
             dh.MaNguoiDung, dh.TongTien, nd.Ten AS TenNguoiDung, nd.Email
      FROM ThanhToan tt
      LEFT JOIN DonHang dh ON tt.MaDonHang = dh.MaDonHang
      LEFT JOIN NguoiDung nd ON dh.MaNguoiDung = nd.MaNguoiDung
      WHERE tt.MaDonHang = ?
      ORDER BY tt.NgayThanhToan DESC
    `;
    const [rows] = await db.query(query, [MaDonHang]);
    if (rows.length === 0) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y thanh to√°n cho ƒë∆°n h√†ng n√†y.' });
    }
    res.status(200).json(rows);
  } catch (error) {
    console.error('L·ªói khi l·∫•y thanh to√°n theo ƒë∆°n h√†ng:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};

// üü¢ Th√™m thanh to√°n m·ªõi
exports.addNewCheckout = async (req, res) => {
  try {
    const { MaDonHang, PhuongThuc, TrangThai } = req.body;

    // X√°c th·ª±c d·ªØ li·ªáu
    if (!MaDonHang || !PhuongThuc) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin thanh to√°n.' });
    }

    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá
    const validMethods = ['TienMat', 'ChuyenKhoan', 'TheTinDung'];
    if (!validMethods.includes(PhuongThuc)) {
      return res.status(400).json({ message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    const validStatuses = ['ChoXacNhan', 'ThanhCong', 'ThatBai'];
    if (TrangThai && !validStatuses.includes(TrangThai)) {
      return res.status(400).json({ message: 'Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá.' });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i
    const [order] = await db.query('SELECT MaDonHang FROM DonHang WHERE MaDonHang = ?', [MaDonHang]);
    if (order.length === 0) {
      return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i.' });
    }

    // Th√™m thanh to√°n
    const query = 'INSERT INTO ThanhToan (MaDonHang, PhuongThuc, TrangThai) VALUES (?, ?, ?)';
    const [result] = await db.query(query, [MaDonHang, PhuongThuc, TrangThai || 'ChoXacNhan']);
    res.status(201).json({ MaThanhToan: result.insertId, message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.' });
  } catch (error) {
    console.error('L·ªói khi th√™m thanh to√°n:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};

// üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
exports.updateCheckoutStatus = async (req, res) => {
  try {
    const { MaThanhToan } = req.params;
    const { TrangThai } = req.body;

    // X√°c th·ª±c tr·∫°ng th√°i
    const validStatuses = ['ChoXacNhan', 'ThanhCong', 'ThatBai'];
    if (!TrangThai || !validStatuses.includes(TrangThai)) {
      return res.status(400).json({ message: 'Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá.' });
    }

    // Ki·ªÉm tra thanh to√°n t·ªìn t·∫°i
    const [payment] = await db.query('SELECT MaThanhToan FROM ThanhToan WHERE MaThanhToan = ?', [MaThanhToan]);
    if (payment.length === 0) {
      return res.status(404).json({ message: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i.' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    const query = 'UPDATE ThanhToan SET TrangThai = ? WHERE MaThanhToan = ?';
    const [result] = await db.query(query, [TrangThai, MaThanhToan]);
    res.status(200).json({ message: 'Tr·∫°ng th√°i thanh to√°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.' });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};

// üü¢ X√≥a thanh to√°n
exports.deletecheckout = async (req, res) => {
  try {
    const { MaThanhToan } = req.params;

    // Ki·ªÉm tra thanh to√°n t·ªìn t·∫°i
    const [payment] = await db.query('SELECT MaThanhToan FROM ThanhToan WHERE MaThanhToan = ?', [MaThanhToan]);
    if (payment.length === 0) {
      return res.status(404).json({ message: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i.' });
    }

    // X√≥a thanh to√°n
    const query = 'DELETE FROM ThanhToan WHERE MaThanhToan = ?';
    await db.query(query, [MaThanhToan]);
    res.status(200).json({ message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.' });
  } catch (error) {
    console.error('L·ªói khi x√≥a thanh to√°n:', error);
    res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
};